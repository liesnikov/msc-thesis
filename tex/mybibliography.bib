@article{krebbers_mosel_2018,
	title = {{MoSeL}: a general, extensible modal framework for interactive proofs in separation logic},
	volume = {2},
	issn = {24751421},
	url = {http://dl.acm.org/citation.cfm?doid=3243631.3236772},
	doi = {10.1145/3236772},
	shorttitle = {{MoSeL}},
	pages = {1--30},
	issue = {{ICFP}},
	journaltitle = {Proceedings of the {ACM} on Programming Languages},
	author = {Krebbers, Robbert and Jourdan, Jacques-Henri and Jung, Ralf and Tassarotti, Joseph and Kaiser, Jan-Oliver and Timany, Amin and Charguéraud, Arthur and Dreyer, Derek},
	urldate = {2020-03-28},
	date = {2018-07-30},
	langid = {english},
	file = {Krebbers et al. - 2018 - MoSeL a general, extensible modal framework for i.pdf:/home/buzzer/my-dir/personal/Dropbox/stuff/papers/Krebbers et al/2018/Krebbers et al. - 2018 - MoSeL a general, extensible modal framework for i.pdf:application/pdf}
}

@article{krebbers_interactive_2017,
	title = {Interactive proofs in higher-order concurrent separation logic},
	pages = {205--217},
	journaltitle = {Proceedings of the 44th {ACM} {SIGPLAN} Symposium on Principles of Programming Languages},
	author = {Krebbers, Robbert and Lars, Birkedal and Amin, Timany},
	date = {2017},
	file = {Krebbers et al. - 2017 - Interactive proofs in higher-order concurrent sepa.pdf:/home/buzzer/my-dir/personal/Dropbox/stuff/papers/Krebbers et al/2017/Krebbers et al. - 2017 - Interactive proofs in higher-order concurrent sepa.pdf:application/pdf}
}

@online{chajed_ltac2_nodate,
	title = {An Ltac2 tutorial},
	url = {https://github.com/tchajed/ltac2-tutorial/blob/master/src/ltac2_tutorial.v},
	abstract = {This tutorial aims to be pragmatic, but it is not specific to an application.
The pragmatics of Ltac2 are likely to change, as the language becomes more
usable. Picking an application and really trying to use Ltac2 for it is likely
to uncover more tricks and bug reports necessary to make the language work.},
	titleaddon = {Github},
	type = {source file},
	author = {Chajed, Tej}
}

@incollection{berghofer_practical_2009,
	location = {Berlin, Heidelberg},
	title = {Practical Tactics for Separation Logic},
	volume = {5674},
	isbn = {978-3-642-03358-2 978-3-642-03359-9},
	url = {http://link.springer.com/10.1007/978-3-642-03359-9_24},
	abstract = {We present a comprehensive set of tactics that make it practical to use separation logic in a proof assistant. These tactics enable the veriﬁcation of partial correctness properties of complex pointer-intensive programs. Our goal is to make separation logic as easy to use as the standard logic of a proof assistant. We have developed tactics for the simpliﬁcation, rearranging, splitting, matching and rewriting of separation logic assertions as well as the discharging of a program veriﬁcation condition using a separation logic description of the machine state. We have implemented our tactics in the Coq proof assistant, applying them to a deep embedding of Cminor, a C-like intermediate language used by Leroy’s veriﬁed {CompCert} compiler. We have used our tactics to verify the safety and completeness of a Cheney copying garbage collector written in Cminor. Our ideas should be applicable to other substructural logics and imperative languages.},
	pages = {343--358},
	booktitle = {Theorem Proving in Higher Order Logics},
	publisher = {Springer Berlin Heidelberg},
	author = {{McCreight}, Andrew},
	editor = {Berghofer, Stefan and Nipkow, Tobias and Urban, Christian and Wenzel, Makarius},
	urldate = {2020-03-29},
	date = {2009},
	langid = {english},
	doi = {10.1007/978-3-642-03359-9_24},
	file = {McCreight - 2009 - Practical Tactics for Separation Logic.pdf:/home/buzzer/my-dir/personal/Dropbox/stuff/papers/McCreight/2009/McCreight - 2009 - Practical Tactics for Separation Logic.pdf:application/pdf}
}

@incollection{goos_local_2001,
	location = {Berlin, Heidelberg},
	title = {Local Reasoning about Programs that Alter Data Structures},
	volume = {2142},
	isbn = {978-3-540-42554-0 978-3-540-44802-0},
	url = {http://link.springer.com/10.1007/3-540-44802-0_1},
	abstract = {We describe an extension of Hoare’s logic for reasoning about programs that alter data structures. We consider a low-level storage model based on a heap with associated lookup, update, allocation and deallocation operations, and unrestricted address arithmetic. The assertion language is based on a possible worlds model of the logic of bunched implications, and includes spatial conjunction and implication connectives alongside those of classical logic. Heap operations are axiomatized using what we call the “small axioms”, each of which mentions only those cells accessed by a particular command. Through these and a number of examples we show that the formalism supports local reasoning: A speciﬁcation and proof can concentrate on only those cells in memory that a program accesses.},
	pages = {1--19},
	booktitle = {Computer Science Logic},
	publisher = {Springer Berlin Heidelberg},
	author = {O’Hearn, Peter and Reynolds, John and Yang, Hongseok},
	editor = {Fribourg, Laurent},
	editorb = {Goos, Gerhard and Hartmanis, Juris and van Leeuwen, Jan},
	editorbtype = {redactor},
	urldate = {2020-04-14},
	date = {2001},
	langid = {english},
	doi = {10.1007/3-540-44802-0_1},
	file = {O’Hearn et al. - 2001 - Local Reasoning about Programs that Alter Data Str.pdf:/home/buzzer/my-dir/personal/Dropbox/stuff/papers/O’Hearn et al/2001/O’Hearn et al. - 2001 - Local Reasoning about Programs that Alter Data Str.pdf:application/pdf}
}

@inproceedings{reynolds_separation_2002,
	location = {Copenhagen, Denmark},
	title = {Separation logic: a logic for shared mutable data structures},
	isbn = {978-0-7695-1483-3},
	url = {http://ieeexplore.ieee.org/document/1029817/},
	doi = {10.1109/LICS.2002.1029817},
	shorttitle = {Separation logic},
	abstract = {In joint work with Peter O’Hearn and others, based on early ideas of Burstall, we have developed an extension of Hoare logic that permits reasoning about low-level imperative programs that use shared mutable data structure.},
	eventtitle = {17th Annual {IEEE} Symposium on Logic in Computer Science},
	pages = {55--74},
	booktitle = {Proceedings 17th Annual {IEEE} Symposium on Logic in Computer Science},
	publisher = {{IEEE} Comput. Soc},
	author = {Reynolds, J.C.},
	urldate = {2020-04-14},
	date = {2002},
	langid = {english},
	file = {Reynolds - 2002 - Separation logic a logic for shared mutable data .pdf:/home/buzzer/my-dir/personal/Dropbox/stuff/papers/Reynolds/2002/Reynolds - 2002 - Separation logic a logic for shared mutable data .pdf:application/pdf}
}

@article{Harland_Pym_2003,
  title={Resource-Distribution via Boolean Constraints},
  volume={4},
  ISSN={1529-3785},
  DOI={10.1145/601775.601778},
  number={1},
  journal={ACM Trans. Comput. Logic},
  author={Harland, James and Pym, David},
  year={2003},
  month={Jan},
  pages={56–90}
}

@unpublished{pedrot_ltac_2016,
	title = {Ltac Internals},
	note = {Coq Implementors' Workshop},
	author = {Pédrot, Pierre-Marie},
	date = {2016-03-06},
	langid = {english},
	file = {Pédrot - 2016 - Ltac Internals.pdf:/home/buzzer/my-dir/personal/Dropbox/stuff/papers/Pédrot/2016/Pédrot - 2016 - Ltac Internals.pdf:application/pdf}
}

@inproceedings{pedrot_ltac2_2019,
	location = {Cascais, Portugal},
	title = {Ltac2: Tactical Warfare},
	url = {https://popl19.sigplan.org/details/CoqPL-2019/8/Ltac2-Tactical-Warfare},
	abstract = {We present Ltac2, a proposal for the replacement of the Ltac tactic language that is shipped with Coq as the default interface to build up proofs interactively. Ltac2 is primarily motivated by two antagonistic desires, namely extending the expressivity and regularity of the historical tactic language of Coq while maintaining a strong backward compatibility. We thereafter give a bird’s eye view of the features and semantics of the current state of Ltac2.},
	eventtitle = {The Fifth International Workshop on Coq for Programming Languages /},
	pages = {3},
	author = {Pédrot, Pierre-Marie},
	date = {2019},
	langid = {english},
	file = {Pédrot - 2019 - Ltac2 Tactical Warfare.pdf:/home/buzzer/my-dir/personal/Dropbox/stuff/papers/Pédrot/2019/Pédrot - 2019 - Ltac2 Tactical Warfare.pdf:application/pdf}
}

@online{pedrot_coqhott-minute_2016,
	title = {{CoqHoTT}-minute : Ticking like a Clockwork: the New Coq Tactics},
	url = {http://coqhott.gforge.inria.fr/blog/coq-tactic-engine/},
	abstract = {This post describes the new tactic engine designed by Arnaud Spiwack which has replaced the old implementation beginning from Coq 8.5. To replace this work in its context, we first recall the history of tactics in Coq, both from the point of view of the user and the developer. There will be more {OCaml} code than Coq code, so please bear with me. Hopefully this will clarify things up for people outside of the cénacle of Coq developers, and provide hindsights into the current design choices.},
	titleaddon = {{CoqHoTT}-minute},
	author = {Pédrot, Pierre-Marie},
	urldate = {2020-09-10},
	date = {2016-02-14},
	langid = {english},
	file = {CoqHoTT-minute \: Ticking like a Clockwork\: the New Coq Tactics:/home/buzzer/.local/share/Zotero/storage/L9QMVCYB/coq-tactic-engine.html:text/html}
}

@online{noauthor_listt_nodate,
	title = {{ListT} done right - {HaskellWiki}},
	url = {https://wiki.haskell.org/ListT_done_right},
	abstract = {The Haskell hierarchical libraries implement a {ListT} monad transformer. There are, however, some problems with that implementation.

    {ListT} imposes unnecessary strictness.
    {ListT} isn't really a monad transformer, ie. {ListT} m isn't always a monad for a monad m.

See the \#Examples below for demonstrations of these problems.},
	titleaddon = {{HaskellWiki}},
	type = {wiki},
	urldate = {2020-09-10},
	file = {ListT done right - HaskellWiki:/home/buzzer/.local/share/Zotero/storage/6JJBPKFA/ListT_done_right.html:text/html}
}

@article{kiselyov_backtracking_2005,
	title = {Backtracking, interleaving, and terminating monad transformers: (functional pearl)},
	volume = {40},
	issn = {0362-1340},
	url = {https://doi.org/10.1145/1090189.1086390},
	doi = {10.1145/1090189.1086390},
	shorttitle = {Backtracking, interleaving, and terminating monad transformers},
	abstract = {We design and implement a library for adding backtracking computations to any Haskell monad. Inspired by logic programming, our library provides, in addition to the operations required by the {MonadPlus} interface, constructs for fair disjunctions, fair conjunctions, conditionals, pruning, and an expressive top-level interface. Implementing these additional constructs is easy in models of backtracking based on streams, but not known to be possible in continuation-based models. We show that all these additional constructs can be generically and monadically realized using a single primitive msplit. We present two implementations of the library: one using success and failure continuations; and the other using control operators for manipulating delimited continuations.},
	pages = {192--203},
	number = {9},
	journaltitle = {{ACM} {SIGPLAN} Notices},
	shortjournal = {{SIGPLAN} Not.},
	author = {Kiselyov, Oleg and Shan, Chung-chieh and Friedman, Daniel P. and Sabry, Amr},
	urldate = {2020-09-10},
	date = {2005-09-12},
	keywords = {continuations, control delimiters, Haskell, logic programming, Prolog, streams},
	file = {Kiselyov et al. - 2005 - Backtracking, interleaving, and terminating monad .pdf:/home/buzzer/my-dir/personal/Dropbox/stuff/papers/Kiselyov et al/2005/Kiselyov et al. - 2005 - Backtracking, interleaving, and terminating monad .pdf:application/pdf}
}

@inproceedings{spiwack_abstract_2010,
	title = {An abstract type for constructing tactics in Coq},
	url = {https://hal.inria.fr/inria-00502500},
	abstract = {The Coq proof assistant is a large development, a lot of which happens to be more or less dependent on the type of tactics. To be able to perform tweaks in this type more easily in the future, we propose an {API} for building tactics which doesn't need to expose the type of tactics and yet has a fairly small amount of primitives. This {API} accompanies an entirely new implementation of the core tactic engine of Coq which aims at handling more gracefully existential variables (aka. metavariables) in proofs - like in more recent proof assistants like Matita and Agda2. We shall, then, leverage this newly acquired independence of the concrete type of tactics from the {API} to add backtracking abilities.},
	eventtitle = {Proof Search in Type Theory},
	author = {Spiwack, Arnaud},
	urldate = {2020-09-10},
	date = {2010-07-15},
	langid = {english},
	file = {Spiwack - 2010 - An abstract type for constructing tactics in Coq.pdf:/home/buzzer/my-dir/personal/Dropbox/stuff/papers/Spiwack/2010/Spiwack - 2010 - An abstract type for constructing tactics in Coq.pdf:application/pdf}
}

@unpublished{pedrot_towards_2016,
	title = {Towards Ltac 2.0},
	url = {https://www.xn--pdrot-bsa.fr/slides/deepspec-06-16.pdf},
	note = {{DeepSpec} Workshop},
	author = {Pédrot, Pierre-Marie},
	urldate = {2020-09-10},
	date = {2016-06-08},
	file = {deepspec-06-16.pdf:/home/buzzer/.local/share/Zotero/storage/BILXA737/deepspec-06-16.pdf:application/pdf}
}